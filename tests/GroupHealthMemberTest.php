<?php

declare(strict_types=1);

namespace NowCerts\Test;

final class GroupHealthMemberTest extends NowCertsTestCase {

  public function testGroupHealthMemberBulkInsertOrUpdate(): void {
    $fields = array(
      array(
        "insuredDatabaseId" => "aeb11a33-e492-4968-ad67-0eab8f383eab",
        "insuredEmail" => "sample string 1",
        "insuredFirstName" => "sample string 2",
        "insuredLastName" => "sample string 3",
        "insuredCommercialName" => "sample string 4",
        "policyNumbers" => array(
          "sample string 1",
          "sample string 2",
        ),
        "locationDatabaseId" => "4ee360aa-e787-4723-93d7-c1a8d8e06dd3",
        "locationId" => "sample string 5",
        "locationAddressLine1" => "sample string 6",
        "locationCity" => "sample string 7",
        "locationType" => 0,
        "groupName" => "sample string 8",
        "effectiveDate" => "2020-03-17T19:05:58.3504369-05:00",
        "expirationDate" => "2020-03-17T19:05:58.3504369-05:00",
        "description" => "sample string 9",
        "addressLine1" => "sample string 10",
        "addressLine2" => "sample string 11",
        "state" => "sample string 12",
        "city" => "sample string 13",
        "zipCode" => "sample string 14",
        "hireDate" => "2020-03-17T19:05:58.3504369-05:00",
        "terminationDate" => "2020-03-17T19:05:58.3504369-05:00",
        "medicalInsuranceId" => "sample string 15",
        "dentalInsuranceId" => "sample string 16",
        "visionInsuranceId" => "sample string 17",
        "memberTypeId" => 1,
        "medicalCoverageTierId" => 1,
        "dentalCoverageTierId" => 1,
        "visionCoverageTierId" => 1,
        "employeeTypeId" => 1,
        "statusId" => 1,
        "compensationType" => "sample string 18",
        "jobTitle" => "sample string 19",
        "payCycle" => "sample string 20",
        "carrierTotalRate" => 1.0,
        "employeeRate" => 1.0,
        "spouseRate" => 1.0,
        "childrenRate" => 1.0,
        "employeeContribution" => 1.0,
        "employeePreTaxCost" => 1.0,
        "employeePostTaxCost" => 1.0,
        "employeeCostPerDeductionPeriodDays" => 1,
        "deductionPeriodsDays" => 1,
        "planDetailEffectiveDate" => "2020-03-17T19:05:58.3660202-05:00",
        "lastModifiedDate" => "2020-03-17T19:05:58.3660202-05:00",
        "eSignDate" => "2020-03-17T19:05:58.3660202-05:00",
        "spouse" => array(
          "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
          "firstName" => "sample string 2",
          "middleName" => "sample string 3",
          "lastName" => "sample string 4",
          "citizenship" => "sample string 5",
          "race" => "sample string 6",
          "maritalStatus" => 1,
          "gender" => 0,
          "ssn" => "sample string 7",
          "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
          "email" => "sample string 8",
          "phone" => "sample string 9",
        ),
        "children" => array(
          array(
            "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
            "firstName" => "sample string 2",
            "middleName" => "sample string 3",
            "lastName" => "sample string 4",
            "citizenship" => "sample string 5",
            "race" => "sample string 6",
            "maritalStatus" => 1,
            "gender" => 0,
            "ssn" => "sample string 7",
            "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
            "email" => "sample string 8",
            "phone" => "sample string 9",
          ),
          array(
            "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
            "firstName" => "sample string 2",
            "middleName" => "sample string 3",
            "lastName" => "sample string 4",
            "citizenship" => "sample string 5",
            "race" => "sample string 6",
            "maritalStatus" => 1,
            "gender" => 0,
            "ssn" => "sample string 7",
            "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
            "email" => "sample string 8",
            "phone" => "sample string 9",
          ),
        ),
        "databaseId" => "2a3d58c8-3dc8-4d5f-86ce-454ce4d0b9e3",
        "firstName" => "sample string 22",
        "middleName" => "sample string 23",
        "lastName" => "sample string 24",
        "citizenship" => "sample string 25",
        "race" => "sample string 26",
        "maritalStatus" => 1,
        "gender" => 0,
        "ssn" => "sample string 27",
        "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
        "email" => "sample string 28",
        "phone" => "sample string 29",
      ),
      array(
        "insuredDatabaseId" => "aeb11a33-e492-4968-ad67-0eab8f383eab",
        "insuredEmail" => "sample string 1",
        "insuredFirstName" => "sample string 2",
        "insuredLastName" => "sample string 3",
        "insuredCommercialName" => "sample string 4",
        "policyNumbers" => array(
          "sample string 1",
          "sample string 2",
        ),
        "locationDatabaseId" => "4ee360aa-e787-4723-93d7-c1a8d8e06dd3",
        "locationId" => "sample string 5",
        "locationAddressLine1" => "sample string 6",
        "locationCity" => "sample string 7",
        "locationType" => 0,
        "groupName" => "sample string 8",
        "effectiveDate" => "2020-03-17T19:05:58.3504369-05:00",
        "expirationDate" => "2020-03-17T19:05:58.3504369-05:00",
        "description" => "sample string 9",
        "addressLine1" => "sample string 10",
        "addressLine2" => "sample string 11",
        "state" => "sample string 12",
        "city" => "sample string 13",
        "zipCode" => "sample string 14",
        "hireDate" => "2020-03-17T19:05:58.3504369-05:00",
        "terminationDate" => "2020-03-17T19:05:58.3504369-05:00",
        "medicalInsuranceId" => "sample string 15",
        "dentalInsuranceId" => "sample string 16",
        "visionInsuranceId" => "sample string 17",
        "memberTypeId" => 1,
        "medicalCoverageTierId" => 1,
        "dentalCoverageTierId" => 1,
        "visionCoverageTierId" => 1,
        "employeeTypeId" => 1,
        "statusId" => 1,
        "compensationType" => "sample string 18",
        "jobTitle" => "sample string 19",
        "payCycle" => "sample string 20",
        "carrierTotalRate" => 1.0,
        "employeeRate" => 1.0,
        "spouseRate" => 1.0,
        "childrenRate" => 1.0,
        "employeeContribution" => 1.0,
        "employeePreTaxCost" => 1.0,
        "employeePostTaxCost" => 1.0,
        "employeeCostPerDeductionPeriodDays" => 1,
        "deductionPeriodsDays" => 1,
        "planDetailEffectiveDate" => "2020-03-17T19:05:58.3660202-05:00",
        "lastModifiedDate" => "2020-03-17T19:05:58.3660202-05:00",
        "eSignDate" => "2020-03-17T19:05:58.3660202-05:00",
        "spouse" => array(
          "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
          "firstName" => "sample string 2",
          "middleName" => "sample string 3",
          "lastName" => "sample string 4",
          "citizenship" => "sample string 5",
          "race" => "sample string 6",
          "maritalStatus" => 1,
          "gender" => 0,
          "ssn" => "sample string 7",
          "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
          "email" => "sample string 8",
          "phone" => "sample string 9",
        ),
        "children" => array(
          array(
            "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
            "firstName" => "sample string 2",
            "middleName" => "sample string 3",
            "lastName" => "sample string 4",
            "citizenship" => "sample string 5",
            "race" => "sample string 6",
            "maritalStatus" => 1,
            "gender" => 0,
            "ssn" => "sample string 7",
            "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
            "email" => "sample string 8",
            "phone" => "sample string 9",
          ),
          array(
            "databaseId" => "4a99ebbb-041a-44bc-8f6a-f52c8d13ac56",
            "firstName" => "sample string 2",
            "middleName" => "sample string 3",
            "lastName" => "sample string 4",
            "citizenship" => "sample string 5",
            "race" => "sample string 6",
            "maritalStatus" => 1,
            "gender" => 0,
            "ssn" => "sample string 7",
            "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
            "email" => "sample string 8",
            "phone" => "sample string 9",
          ),
        ),
        "databaseId" => "2a3d58c8-3dc8-4d5f-86ce-454ce4d0b9e3",
        "firstName" => "sample string 22",
        "middleName" => "sample string 23",
        "lastName" => "sample string 24",
        "citizenship" => "sample string 25",
        "race" => "sample string 26",
        "maritalStatus" => 1,
        "gender" => 0,
        "ssn" => "sample string 27",
        "dateOfBirth" => "2020-03-17T19:05:58.3660202-05:00",
        "email" => "sample string 28",
        "phone" => "sample string 29",
      ),
    );
    $results = \NowCerts\GroupHealthMember::bulkInsertOrUpdate($fields);

    $member = new \NowCerts\GroupHealthMember($fields[0]);
    $this->assertSame(\NowCerts\AddressType::class, get_class($member->locationType));
    $this->assertSame(\NowCerts\GroupHealthMemberType::class, get_class($member->memberTypeId));
    $this->assertSame(\NowCerts\GroupHealthMemberCoverageTier::class, get_class($member->medicalCoverageTierId));
    $this->assertSame(\NowCerts\GroupHealthMemberCoverageTier::class, get_class($member->dentalCoverageTierId));
    $this->assertSame(\NowCerts\GroupHealthMemberCoverageTier::class, get_class($member->visionCoverageTierId));
    $this->assertSame(\NowCerts\GroupHealthMemberEmployeeType::class, get_class($member->employeeTypeId));
    $this->assertSame(\NowCerts\GroupHealthMemberStatus::class, get_class($member->statusId));
    $this->assertSame(\NowCerts\GroupHealthMemberSimple::class, get_class($member->spouse));
    $this->assertSame(\NowCerts\GroupHealthMemberSimple::class, get_class($member->children[0]));
    $this->assertSame(\NowCerts\GroupHealthMemberMaritalStatus::class, get_class($member->maritalStatus));
    $this->assertSame(\NowCerts\GenderCode::class, get_class($member->gender));
  }

}
